//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StudentTracking.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class StudentTrackingEntities : DbContext
    {
        public StudentTrackingEntities()
            : base("name=StudentTrackingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<Class> Classes { get; set; }
        public virtual DbSet<Holiday> Holidays { get; set; }
        public virtual DbSet<Message> Messages { get; set; }
        public virtual DbSet<PrimaryTag> PrimaryTags { get; set; }
        public virtual DbSet<School> Schools { get; set; }
        public virtual DbSet<SchoolBranch> SchoolBranches { get; set; }
        public virtual DbSet<SecondaryTag> SecondaryTags { get; set; }
        public virtual DbSet<Section> Sections { get; set; }
        public virtual DbSet<StaffDetail> StaffDetails { get; set; }
        public virtual DbSet<StudentAttendance> StudentAttendances { get; set; }
        public virtual DbSet<StudentDetail> StudentDetails { get; set; }
    
        public virtual ObjectResult<sp_InsertUpdateAttendance_Result> sp_InsertUpdateAttendance(string tagId, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, Nullable<bool> isInTime, string ipAddress)
        {
            var tagIdParameter = tagId != null ?
                new ObjectParameter("TagId", tagId) :
                new ObjectParameter("TagId", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var isInTimeParameter = isInTime.HasValue ?
                new ObjectParameter("IsInTime", isInTime) :
                new ObjectParameter("IsInTime", typeof(bool));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_InsertUpdateAttendance_Result>("sp_InsertUpdateAttendance", tagIdParameter, startTimeParameter, endTimeParameter, isInTimeParameter, ipAddressParameter);
        }
    
        public virtual int sp_UpdateMessagingStatus(Nullable<long> attendanceId, Nullable<bool> isInTime)
        {
            var attendanceIdParameter = attendanceId.HasValue ?
                new ObjectParameter("AttendanceId", attendanceId) :
                new ObjectParameter("AttendanceId", typeof(long));
    
            var isInTimeParameter = isInTime.HasValue ?
                new ObjectParameter("IsInTime", isInTime) :
                new ObjectParameter("IsInTime", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateMessagingStatus", attendanceIdParameter, isInTimeParameter);
        }
    }
}
